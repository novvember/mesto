(()=>{"use strict";var e=".popup__form",t={formSelector:e,inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},n={name:document.querySelector(".profile__name"),job:document.querySelector(".profile__job"),avatar:document.querySelector(".profile__avatar-image")},r=document.querySelector(".profile__button_type_edit"),o=".popup_type_edit-profile",i=document.querySelector(o),u=i.querySelector(".popup__input_type_name"),a=i.querySelector(".popup__input_type_job"),c=document.querySelector(".profile__avatar-button"),s=document.querySelector(".profile__button_type_add"),l=".popup_type_add-card",f=(document.querySelector(l).querySelector(e),{baseUrl:"https://mesto.nomoreparties.co/v1/".concat("cohort-41"),headers:{authorization:"b5024e97-68ca-4480-bf36-543078de24a2","Content-Type":"application/json"}});function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var h=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=t,this._container=document.querySelector(n)}var t,n;return t=e,n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){var n=t._renderer(e);t.addItem(n)}))}},{key:"addItem",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t?this._container.prepend(e):this._container.append(e)}}],n&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n,r,o,i,u){var a=t.name,c=t.link,s=t.likes,l=t.owner,f=t.createdAt,p=t._id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=a,this._link=c,this._likes=s,this._owner=l,this._createdAt=f,this._id=p,this._userId=u,this._isLiked=this._checkIsLiked(),this._templateSelector=n,this._handleCardClick=r,this._handleDeleteCard=o,this._handleLikeCard=i}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate(),this._likeButton=this._element.querySelector(".card__like-button");var e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this.setLikes(),this._owner._id!==this._userId&&this._element.querySelector(".card__delete-button").remove(),this._setEventlisteners(),this._element}},{key:"_setEventlisteners",value:function(){var e=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(){return e._likeCard()})),this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)})),this._element.querySelector(".card__delete-button")&&this._element.querySelector(".card__delete-button").addEventListener("click",(function(){return e._handleDelete()}))}},{key:"_likeCard",value:function(){this._handleLikeCard(this._id,this._isLiked)}},{key:"blockLikeButton",value:function(){this._likeButton.disabled=!0}},{key:"unblockLikeButton",value:function(){this._likeButton.disabled=!1}},{key:"_handleDelete",value:function(){this._handleDeleteCard(this._id)}},{key:"_checkIsLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"setLikes",value:function(e){var t=this._element.querySelector(".card__like-count"),n=this._element.querySelector(".card__like-button");e&&(this._likes=e,this._isLiked=this._checkIsLiked()),t.textContent=this._likes.length,this._isLiked?n.classList.add("card__like-button_active"):n.classList.remove("card__like-button_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._popupCloseButton=this._popup.querySelector(".popup__cancel-button")}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){t.target===t.currentTarget&&e.close()})),this._popupCloseButton.addEventListener("click",(function(){e.close()}))}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=E(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function E(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function g(e,t){return g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},g(e,t)}function w(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var j=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._figureElement=t._popup.querySelector(".popup__image"),t._captionElement=t._popup.querySelector(".popup__image-caption"),t}return t=u,(n=[{key:"open",value:function(e,t){this._figureElement.src=e,this._figureElement.alt=t,this._captionElement.textContent=t,k(S(u.prototype),"open",this).call(this)}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(b);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=B(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},L.apply(this,arguments)}function B(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function q(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return q(this,e)});function u(e,t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,e))._handleSubmit=t,r._form=r._popup.querySelector(".popup__form"),r._inputValues={},r._handleOpenForm=n,r.formName=r._form.getAttribute("name"),r._allInputs=r._form.querySelectorAll(".popup__input"),r._submitButton=r._form.querySelector(".popup__save-button"),r._originalButtonText=r._submitButton.textContent,r}return t=u,n=[{key:"_getInputValues",value:function(){var e=this;return this._allInputs.forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;L(T(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submit()}))}},{key:"_submit",value:function(){this._handleSubmit(this._getInputValues())}},{key:"blockSubmitButton",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Сохранение...";this._blockedButtonText=e,this._submitButton.disabled=!0,this._submitButton.textContent=this._blockedButtonText}},{key:"unblockSubmitButton",value:function(){this._submitButton.disabled=!1,this._submitButton.textContent=this._originalButtonText}},{key:"close",value:function(){L(T(u.prototype),"close",this).call(this),this._form.reset()}},{key:"open",value:function(){L(T(u.prototype),"open",this).call(this),this._handleOpenForm()}}],n&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(b);function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function U(){return U="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=A(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},U.apply(this,arguments)}function A(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}function D(e,t){return D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},D(e,t)}function N(e,t){if(t&&("object"===R(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function V(e){return V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},V(e)}var J=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&D(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return N(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleSubmit=t,n._button=n._popup.querySelector(".popup__save-button"),n}return t=u,(n=[{key:"setEventListeners",value:function(){var e=this;U(V(u.prototype),"setEventListeners",this).call(this),this._button.addEventListener("click",(function(){e._handleSubmit(e._target)}))}},{key:"setTarget",value:function(e){this._target=e}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(b);function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var G=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))})),this._toggleButtonState()}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"hideErrors",value:function(){var e=this;this._inputElements.forEach((function(t){e._hideInputError(t)}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this._enableButtonState()}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputElements.some((function(e){return!1===e.validity.valid}))}}])&&F(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=function(){function e(t){var n=t.nameElement,r=t.jobElement,o=t.avatarElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=n,this._jobElement=r,this._avatarElement=o}var t,n;return t=e,(n=[{key:"fill",value:function(e){var t=e.name,n=e.about,r=e.avatar,o=e.cohort,i=e._id;this._name=t,this._job=n,this._avatar=r,this._cohort=o,this.id=i}},{key:"getUserInfo",value:function(){return{name:this._name,job:this._job}}},{key:"renderName",value:function(){this._nameElement.textContent=this._name}},{key:"renderJob",value:function(){this._jobElement.textContent=this._job}},{key:"renderAvatar",value:function(){this._avatarElement.src=this._avatar}}])&&H(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var K={},Q={};function W(e){var t=new d(e,"#card",X,Y,Z,te.id);return Q[e._id]=t,t.generateCard()}function X(e,t){ue.open(e,t)}function Y(e){ae.setTarget(e),ae.open()}function Z(e,t){Q[e].blockLikeButton(),ee.toggleLike(e,t).then((function(t){Q[e].setLikes(t)})).catch((function(e){return console.error(e)})).finally((function(){Q[e].unblockLikeButton()}))}function $(){K[this.formName].hideErrors(),K[this.formName].disableButtonState()}var ee=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e="".concat(this._baseUrl,"/users/me");return fetch(e,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job,r="".concat(this._baseUrl,"/users/me");return fetch(r,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"changeAvatar",value:function(e){var t="".concat(this._baseUrl,"/users/me/avatar");return fetch(t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"getInitialCards",value:function(){var e="".concat(this._baseUrl,"/cards");return fetch(e,{method:"GET",headers:this._headers}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"addNewCard",value:function(e){var t=e.name,n=e.link,r="".concat(this._baseUrl,"/cards");return fetch(r,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"deleteCard",value:function(e){var t="".concat(this._baseUrl,"/cards/").concat(e);return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?Promise.resolve():e.json().then((function(e){throw new Error(e.message)}))}))}},{key:"_setLike",value:function(e){var t="".concat(this._baseUrl,"/cards/").concat(e,"/likes");return fetch(t,{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))})).then((function(e){return e.likes}))}},{key:"_deleteLike",value:function(e){var t="".concat(this._baseUrl,"/cards/").concat(e,"/likes");return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():e.json().then((function(e){throw new Error(e.message)}))})).then((function(e){return e.likes}))}},{key:"toggleLike",value:function(e,t){return t?this._deleteLike(e):this._setLike(e)}}])&&M(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())(f),te=new z({nameElement:n.name,jobElement:n.job,avatarElement:n.avatar}),ne=new h(W,".cards"),re=new I(o,(function(e){re.blockSubmitButton(),ee.setUserInfo(e).then((function(e){te.fill(e),te.renderName(),te.renderJob(),re.close()})).catch((function(e){return console.error(e)})).finally((function(){re.unblockSubmitButton()}))}),$),oe=new I(".popup_type_change-avatar",(function(e){oe.blockSubmitButton(),ee.changeAvatar(e.link).then((function(e){te.fill(e),te.renderAvatar(),oe.close()})).catch((function(e){return console.error(e)})).finally((function(){oe.unblockSubmitButton()}))}),$),ie=new I(l,(function(e){ie.blockSubmitButton(),ee.addNewCard(e).then((function(e){ne.addItem(W(e),!0),ie.close()})).catch((function(e){return console.error(e)})).finally((function(){ie.unblockSubmitButton()}))}),$),ue=new j(".popup_type_image"),ae=new J(".popup_type_confirm",(function(e){ee.deleteCard(e).then((function(){Q[e].delete(),ae.close()})).catch((function(e){return console.error(e)}))}));Promise.all([ee.getUserInfo(),ee.getInitialCards()]).then((function(e){te.fill(e[0]),te.renderName(),te.renderJob(),te.renderAvatar(),ne.renderItems(e[1])})).catch((function(e){return console.error(e)})),re.setEventListeners(),r.addEventListener("click",(function(){var e=te.getUserInfo();u.value=e.name,a.value=e.job,re.open(),u.dispatchEvent(new Event("input")),a.dispatchEvent(new Event("input"))})),oe.setEventListeners(),c.addEventListener("click",(function(){oe.open()})),ie.setEventListeners(),s.addEventListener("click",(function(){ie.open()})),ae.setEventListeners(),ue.setEventListeners(),function(e){Array.from(document.querySelectorAll(e.formSelector)).forEach((function(t){var n=new G(e,t);K[t.getAttribute("name")]=n,n.enableValidation()}))}(t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,