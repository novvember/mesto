(()=>{"use strict";var e=".popup__form",t=document.querySelector(".profile__name"),n=document.querySelector(".profile__job"),r=document.querySelector(".profile__avatar-image"),o=document.querySelector(".profile__button_type_edit"),i=".popup_type_edit-profile",a=document.querySelector(i),u=a.querySelector(".popup__input_type_name"),c=a.querySelector(".popup__input_type_job"),s=document.querySelector(".profile__avatar-button"),l=document.querySelector(".profile__button_type_add"),f=".popup_type_add-card",p=document.querySelector(f).querySelector(e),h={baseUrl:"https://mesto.nomoreparties.co/v1/".concat("cohort-41"),headers:{authorization:"b5024e97-68ca-4480-bf36-543078de24a2","Content-Type":"application/json"}};function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){var n=e._renderer(t);e.addItem(n)}))}},{key:"addItem",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t?this._container.prepend(e):this._container.append(e)}}],n&&d(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t,n,r,o,i,a){var u=t.name,c=t.link,s=t.likes,l=t.owner,f=t.createdAt,p=t._id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=u,this._link=c,this._likes=s,this._owner=l,this._createdAt=f,this._id=p,this._userId=a,this._isLiked=this._checkIsLiked(),this._templateSelector=n,this._handleCardClick=r,this._handleDeleteCard=o,this._handleLikeCard=i}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate();var e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this.setLikes(),this._owner._id!==this._userId&&this._element.querySelector(".card__delete-button").remove(),this._setEventlisteners(),this._element}},{key:"_setEventlisteners",value:function(){var e=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(t){return e._likeCard(t)})),this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)})),this._element.querySelector(".card__delete-button")&&this._element.querySelector(".card__delete-button").addEventListener("click",(function(){return e._handleDelete()}))}},{key:"_likeCard",value:function(e){e.target.disabled=!0,this._handleLikeCard(this._id,this._isLiked).then((function(){e.target.disabled=!1}))}},{key:"_handleDelete",value:function(){this._handleDeleteCard(this._id)}},{key:"_checkIsLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"setLikes",value:function(e){var t=this._element.querySelector(".card__like-count"),n=this._element.querySelector(".card__like-button");e&&(this._likes=e,this._isLiked=this._checkIsLiked()),t.textContent=this._likes.length,this._isLiked?n.classList.add("card__like-button_active"):n.classList.remove("card__like-button_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){t.target===t.currentTarget&&e.close()})),this._popupCloseButton=this._popup.querySelector(".popup__cancel-button"),this._popupCloseButton.addEventListener("click",(function(){e.close()}))}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function E(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},w.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=C(e)););return e}function S(e,t){return S=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},S(e,t)}function j(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function C(e){return C=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},C(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&S(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=C(r);if(o){var n=C(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return j(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._figureElement=t._popup.querySelector(".popup__image"),t._captionElement=t._popup.querySelector(".popup__image-caption"),t}return t=a,(n=[{key:"open",value:function(e,t){this._figureElement.src=e,this._figureElement.alt=t,this._captionElement.textContent=t,w(C(a.prototype),"open",this).call(this)}}])&&E(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(m);function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function P(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(){return q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=I(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},q.apply(this,arguments)}function I(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=B(e)););return e}function T(e,t){return T=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},T(e,t)}function R(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function B(e){return B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},B(e)}var U=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&T(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=B(r);if(o){var n=B(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleSubmit=t,n._form=n._popup.querySelector(".popup__form"),n._inputValues={},n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._form.querySelectorAll(".popup__input").forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;q(B(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmit(e._getInputValues())}))}},{key:"close",value:function(){q(B(a.prototype),"close",this).call(this),this._form.reset()}}])&&P(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(m);function A(e){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},A(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(){return D="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=N(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},D.apply(this,arguments)}function N(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=G(e)););return e}function V(e,t){return V=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},V(e,t)}function J(e,t){if(t&&("object"===A(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function G(e){return G=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},G(e)}var H=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&V(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=G(r);if(o){var n=G(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return J(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleSubmit=t,n._button=n._popup.querySelector(".popup__save-button"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;D(G(a.prototype),"setEventListeners",this).call(this),this._button.addEventListener("click",(function(){e._handleSubmit(e._target)}))}},{key:"setTarget",value:function(e){this._target=e}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(m);function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var M=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))})),this._toggleButtonState()}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this._enableButtonState()}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputElements.some((function(e){return!1===e.validity.valid}))}}])&&z(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function F(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var K=function(){function e(t){var n=t.nameElement,r=t.jobElement,o=t.avatarElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=n,this._jobElement=r,this._avatarElement=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name,job:this._job}}},{key:"fill",value:function(e){var t=e.name,n=e.about,r=e.avatar,o=e.cohort,i=e._id;this._name=t,this._job=n,this._avatar=r,this._cohort=o,this.id=i}},{key:"renderName",value:function(){this._nameElement.textContent=this._name}},{key:"renderJob",value:function(){this._jobElement.textContent=this._job}},{key:"renderAvatar",value:function(){this._avatarElement.src=this._avatar}}])&&F(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var W={},X={};function Y(e){var t=new v(e,"#card",Z,$,ee,ne.id);return X[e._id]=t,t.generateCard()}function Z(e,t){ce.open(e,t)}function $(e){se.setTarget(e),se.open()}function ee(e,t){return te.toggleLike(e,t).then((function(t){X[e].setLikes(t)}))}var te=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e=this._baseUrl+"/users/me";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get user info from the server")})).catch((function(e){return console.error(e)}))}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job,r=this._baseUrl+"/users/me";return fetch(r,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send user info to the server")})).catch((function(e){return console.error(e)}))}},{key:"changeAvatar",value:function(e){var t=this._baseUrl+"/users/me/avatar";return fetch(t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send avatar to the server")})).catch((function(e){return console.error(e)}))}},{key:"getInitialCards",value:function(){var e=this._baseUrl+"/cards";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get initial cards from the server")})).catch((function(e){return console.error(e)}))}},{key:"addNewCard",value:function(e){var t=e.name,n=e.link,r=this._baseUrl+"/cards";return fetch(r,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send new card to the server")})).catch((function(e){return console.error(e)}))}},{key:"deleteCard",value:function(e){var t=this._baseUrl+"/cards/".concat(e);return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return Promise.resolve();throw new Error("Can't delete card from the server")})).catch((function(e){return console.error(e)}))}},{key:"_setLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"PUT",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send like to the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"_deleteLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't delete like from the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"toggleLike",value:function(e,t){return t?this._deleteLike(e):this._setLike(e)}}])&&Q(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())(h),ne=new K({nameElement:t,jobElement:n,avatarElement:r});te.getUserInfo().then((function(e){ne.fill(e),ne.renderName(),ne.renderJob(),ne.renderAvatar()}));var re=new _({items:[],renderer:Y},".cards");te.getInitialCards().then((function(e){e.forEach((function(e){var t=Y(e);re.addItem(t)}))}));var oe=new U(i,(function(e){te.setUserInfo(e).then((function(e){ne.fill(e),ne.renderName(),ne.renderJob(),oe.close()}))})),ie=new U(".popup_type_change-avatar",(function(e){te.changeAvatar(e.link).then((function(e){ne.fill(e),ne.renderAvatar(),ie.close()}))}));ie.setEventListeners();var ae,ue=new U(f,(function(e){te.addNewCard(e).then((function(e){re.addItem(Y(e),!0),ue.close(),W[p.getAttribute("name")].disableButtonState()}))})),ce=new O(".popup_type_image"),se=new H(".popup_type_confirm",(function(e){te.deleteCard(e).then((function(){X[e].delete(),se.close()}))}));se.setEventListeners(),oe.setEventListeners(),o.addEventListener("click",(function(){var e=ne.getUserInfo();u.value=e.name,c.value=e.job,u.dispatchEvent(new Event("input")),c.dispatchEvent(new Event("input")),oe.open()})),s.addEventListener("click",(function(){ie.open()})),ue.setEventListeners(),l.addEventListener("click",(function(){ue.open()})),ce.setEventListeners(),ae={formSelector:e,inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},Array.from(document.querySelectorAll(ae.formSelector)).forEach((function(e){var t=new M(ae,e);W[e.getAttribute("name")]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9BcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDQrdC70LXQvNC10L3RgtGLINGB0YLRgNCw0L3QuNGG0Ysg0Lgg0LjRhSDRgdC10LvQtdC60YLQvtGA0YtcbiAqL1xuXG4vLyDQmtC+0L3RgtC10LnQvdC10YAg0YEg0LrQsNGA0YLQvtGH0LrQsNC80LhcbmV4cG9ydCBjb25zdCBjYXJkc1NlbGVjdG9yID0gJy5jYXJkcyc7XG5leHBvcnQgY29uc3QgY2FyZFRlbXBsYXRlU2VsZWN0b3IgPSAnI2NhcmQnO1xuXG4vLyDQntCx0YnQuNC1INGN0LvQtdC80LXQvdGC0Ysg0YTQvtGA0LxcbmV4cG9ydCBjb25zdCBmb3JtU2VsZWN0b3IgPSAnLnBvcHVwX19mb3JtJztcbmV4cG9ydCBjb25zdCBpbnB1dFNlbGVjdG9yID0gJy5wb3B1cF9faW5wdXQnO1xuZXhwb3J0IGNvbnN0IHN1Ym1pdEJ1dHRvblNlbGVjdG9yID0gJy5wb3B1cF9fc2F2ZS1idXR0b24nO1xuZXhwb3J0IGNvbnN0IGluYWN0aXZlQnV0dG9uQ2xhc3MgPSAncG9wdXBfX3NhdmUtYnV0dG9uX2Rpc2FibGVkJztcbmV4cG9ydCBjb25zdCBpbnB1dEVycm9yQ2xhc3MgPSAncG9wdXBfX2lucHV0X3R5cGVfZXJyb3InO1xuZXhwb3J0IGNvbnN0IGVycm9yQ2xhc3MgPSAncG9wdXBfX2lucHV0LWVycm9yX3Zpc2libGUnO1xuXG4vLyDQmNC90YTQvtGA0LzQsNGG0LjRjyDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LVcbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19uYW1lJyk7XG5leHBvcnQgY29uc3QgcHJvZmlsZUpvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19qb2InKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlQXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2F2YXRhci1pbWFnZScpO1xuXG4vLyDQn9C+0L/QsNC/INGBINC40LfQvNC10L3QtdC90LjQtdC8INC40L3RhNC+0YDQvNCw0YbQuNC4INC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtVxuZXhwb3J0IGNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2J1dHRvbl90eXBlX2VkaXQnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlRWRpdFBvcHVwU2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfZWRpdC1wcm9maWxlJztcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlRWRpdFBvcHVwU2VsZWN0b3IpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lSW5wdXQgPSBwcm9maWxlRWRpdFBvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2lucHV0X3R5cGVfbmFtZScpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVKb2JJbnB1dCA9IHByb2ZpbGVFZGl0UG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdHlwZV9qb2InKTtcblxuLy8g0J/QvtC/0LDQvyDRgSDQvtCx0L3QvtCy0LvQtdC90LjQtdC8INCw0LLQsNGC0LDRgNCwXG5leHBvcnQgY29uc3QgYXZhdGFyQ2hhbmdlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2F2YXRhci1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBhdmF0YXJDaGFuZ2VQb3B1cFNlbGVjdG9yID0gJy5wb3B1cF90eXBlX2NoYW5nZS1hdmF0YXInO1xuXG4vLyDQn9C+0L/QsNC/INGBINC00L7QsdCw0LLQu9C10L3QuNC10Lwg0L3QvtCy0YvRhSDQutCw0YDRgtC+0YfQtdC6XG5leHBvcnQgY29uc3QgbmV3Q2FyZEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19idXR0b25fdHlwZV9hZGQnKTtcbmV4cG9ydCBjb25zdCBuZXdDYXJkUG9wdXBTZWxlY3RvciA9ICcucG9wdXBfdHlwZV9hZGQtY2FyZCc7XG5jb25zdCBuZXdDYXJkUG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihuZXdDYXJkUG9wdXBTZWxlY3Rvcik7XG5leHBvcnQgY29uc3QgbmV3Q2FyZEZvcm0gPSBuZXdDYXJkUG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoZm9ybVNlbGVjdG9yKTtcblxuIC8vINCf0L7Qv9Cw0L8g0YEg0YPQstC10LvQuNGH0LXQvdC90YvQvCDQuNC30L7QsdGA0LDQttC10L3QuNC10LxcbmV4cG9ydCBjb25zdCBpbWFnZVBvcHVwU2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfaW1hZ2UnO1xuXG4vLyDQn9C+0L/QsNC/INGBINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNC10LxcbmV4cG9ydCBjb25zdCBjb25maXJtYXRpb25Qb3B1cFNlbGVjdG9yID0gJy5wb3B1cF90eXBlX2NvbmZpcm0nO1xuXG4vLyDQndCw0YHRgtGA0L7QudC60Lgg0LTQu9GPINC/0L7QtNC60LvRjtGH0LXQvdC40Y8g0Log0YHQtdGA0LLQtdGA0YNcbmNvbnN0IHRva2VuID0gJ2I1MDI0ZTk3LTY4Y2EtNDQ4MC1iZjM2LTU0MzA3OGRlMjRhMic7XG5jb25zdCBjb2hvcnRJZCA9ICdjb2hvcnQtNDEnO1xuZXhwb3J0IGNvbnN0IGFwaUNvbmZpZyA9IHtcbiAgYmFzZVVybDogYGh0dHBzOi8vbWVzdG8ubm9tb3JlcGFydGllcy5jby92MS8ke2NvaG9ydElkfWAsXG4gIGhlYWRlcnM6IHtcbiAgICBhdXRob3JpemF0aW9uOiB0b2tlbixcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbiAgLyoqXG4gICAqINCa0LvQsNGB0YEg0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINC+0YLRgNC40YHQvtCy0LrRgyDRjdC70LXQvNC10L3RgtC+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1XG4gICAqXG4gICAqINCf0LDRgNCw0LzQtdGC0YDRizpcbiAgICogaXRlbXMgLSDQvNCw0YHRgdC40LIg0LTQsNC90L3Ri9GFLCDQutC+0YLQvtGA0YvQtSDQvdGD0LbQvdC+INC00L7QsdCw0LLQuNGC0Ywg0L3QsCDRgdGC0YDQsNC90LjRhtGDINC/0YDQuCDQuNC90LjRhtC40LDQu9C40LfQsNGG0LjQuCDQutC70LDRgdGB0LAsXG4gICAqIHJlbmRlcmVyIC0g0YTRg9C90LrRhtC40Y8sINC60L7RgtC+0YDQsNGPINC+0YLQstC10YfQsNC10YIg0LfQsCDRgdC+0LfQtNCw0L3QuNC1INC4INC+0YLRgNC40YHQvtCy0LrRgyDQtNCw0L3QvdGL0YUg0L3QsCDRgdGC0YDQsNC90LjRhtC1LFxuICAgKiBjb250YWluZXJTZWxlY3RvciAtINGB0LXQu9C10LrRgtC+0YAg0LrQvtC90YLQtdC50L3QtdGA0LAsINCyINC60L7RgtC+0YDRi9C5INC90YPQttC90L4g0LTQvtCx0LDQstC70Y/RgtGMINGB0L7Qt9C00LDQvdC90YvQtSDRjdC70LXQvNC10L3RgtGLXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7aXRlbXMsIHJlbmRlcmVyfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gIH1cblxuICByZW5kZXJJdGVtcygpIHtcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgdGhpcy5hZGRJdGVtKGVsZW1lbnQpO1xuICAgIH0pXG4gIH1cblxuICBhZGRJdGVtKGl0ZW0sIGlzSW52ZXJzZWQgPSBmYWxzZSkge1xuICAgIGlmIChpc0ludmVyc2VkKSB7XG4gICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZChpdGVtKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcmQge1xuICAvKipcbiAgICog0J7RgtCy0LXRh9Cw0LXRgiDQt9CwINGB0L7Qt9C00LDQvdC40LUg0Lgg0YTRg9C90LrRhtC40L7QvdC40YDQvtCy0LDQvdC40LUg0LrQsNGA0YLQvtGH0LrQuFxuICAgKiBAY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9INCe0LHRitC10LrRgiDRgSDQtNCw0L3QvdGL0LzQuCDQutCw0YDRgtC+0YfQutC4OlxuICAgKiAtIG5hbWUgLSDQntGC0L7QsdGA0LDQttCw0LXQvNGL0Lkg0LfQsNCz0L7Qu9C+0LLQvtC6INC60LDRgNGC0L7Rh9C60LhcbiAgICogLSBsaW5rIC0g0KHRgdGL0LvQutCwINC90LAg0LjQt9C+0LHRgNCw0LbQtdC90LjQtVxuICAgKiAtIGxpa2VzIC0g0JzQsNGB0YHQuNCyINGBINC+0LHRitC10LrRgtCw0LzQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSwg0L/QvtGB0YLQsNCy0LjQstGI0LjQvNC4INC70LDQudC6XG4gICAqIC0gb3duZXIgLSDQntCx0YrQtdC60YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLdCy0LvQsNC00LXQu9GM0YbQsFxuICAgKiAtIGNyZWF0ZWRBdCAtINCS0YDQtdC80Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQutC4XG4gICAqIC0gX2lkIC0gaWQg0LrQsNGA0YLQvtGH0LrQuFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVTZWxlY3RvciAtINCh0LXQu9C10LrRgtC+0YAgdGVtcGxhdGUt0Y3Qu9C10LzQtdC90YLQsCDRgSDRiNCw0LHQu9C+0L3QvtC8INC60LDRgNGC0L7Rh9C60LhcbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gaGFuZGxlQ2FyZENsaWNrIC0g0KTRg9C90LrRhtC40Y8t0L7QsdGA0LDQsdC+0YLRh9C40Log0LTQu9GPINC60LvQuNC60LAg0L/QviDQutCw0YDRgtC40L3QutC1XG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZURlbGV0ZUNhcmQgLSDQpNGD0L3QutGG0LjRjy3QvtCx0YDQsNCx0L7RgtGH0LjQuiDQtNC70Y8g0LrQvdC+0L/QutC4INGD0LTQsNC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuFxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVMaWtlQ2FyZCAtINCk0YPQvdC60YbQuNGPLdC+0LHRgNCw0LHQvtGC0YfQuNC6INC00LvRjyDQu9Cw0LnQutCwINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIGNvbnN0cnVjdG9yIChcbiAgICB7bmFtZSwgbGluaywgbGlrZXMsIG93bmVyLCBjcmVhdGVkQXQsIF9pZH0sXG4gICAgdGVtcGxhdGVTZWxlY3RvcixcbiAgICBoYW5kbGVDYXJkQ2xpY2ssXG4gICAgaGFuZGxlRGVsZXRlQ2FyZCxcbiAgICBoYW5kbGVMaWtlQ2FyZCxcbiAgICB1c2VySWQpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9saW5rID0gbGluaztcbiAgICB0aGlzLl9saWtlcyA9IGxpa2VzO1xuICAgIHRoaXMuX293bmVyID0gb3duZXI7XG4gICAgdGhpcy5fY3JlYXRlZEF0ID0gY3JlYXRlZEF0O1xuICAgIHRoaXMuX2lkID0gX2lkO1xuICAgIHRoaXMuX3VzZXJJZCA9IHVzZXJJZDtcbiAgICB0aGlzLl9pc0xpa2VkID0gdGhpcy5fY2hlY2tJc0xpa2VkKCk7XG5cbiAgICB0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yID0gdGVtcGxhdGVTZWxlY3RvcjtcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlRGVsZXRlQ2FyZCA9IGhhbmRsZURlbGV0ZUNhcmQ7XG4gICAgdGhpcy5faGFuZGxlTGlrZUNhcmQgPSBoYW5kbGVMaWtlQ2FyZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LDQtdGCINGI0LDQsdC70L7QvSDRgdC+0LfQtNCw0LLQsNC10LzQvtC5INC60LDRgNGC0L7Rh9C60Lgg0LjQtyDRgNCw0LfQvNC10YLQutC4XG4gICAqIEByZXR1cm5zIHtvYmplY3R9INCf0YPRgdGC0L7QuSDRjdC70LXQvNC10L3Rgiwg0YHQvtC30LTQsNC90L3Ri9C5INC40Lcg0YjQsNCx0LvQvtC90LBcbiAgICovXG4gIF9nZXRUZW1wbGF0ZSAoKSB7XG4gICAgY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKVxuICAgICAgICAgICAgICAgICAgICAgIC5jb250ZW50XG4gICAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkJylcbiAgICAgICAgICAgICAgICAgICAgICAuY2xvbmVOb2RlKHRydWUpO1xuICAgIHJldHVybiBjYXJkVGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICog0KHQvtC30LTQsNC10YIg0LfQsNC/0L7Qu9C90LXQvdC90YPRjiDQv9C+INC40YHRhdC+0LTQvdGL0Lwg0LTQsNC90L3Ri9C8INC60LDRgNGC0L7Rh9C60YNcbiAgICogQHJldHVybnMge29iamVjdH0g0JrQsNGA0YLQvtGH0LrQsCwg0LPQvtGC0L7QstCw0Y8g0LTQu9GPINCy0YHRgtCw0LLQutC4INCyINGA0LDQt9C80LXRgtC60YNcbiAgICovXG4gIGdlbmVyYXRlQ2FyZCAoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG5cbiAgICAvLyDQl9Cw0L/QvtC70L3QtdC90LjQtSDRgdC+0LTQtdGA0LbQuNC80L7Qs9C+XG4gICAgY29uc3QgaW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpO1xuICAgIGltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgaW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX190aXRsZScpLnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcblxuICAgIHRoaXMuc2V0TGlrZXMoKTtcblxuICAgIGlmICh0aGlzLl9vd25lci5faWQgIT09IHRoaXMuX3VzZXJJZCkge1xuICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZGVsZXRlLWJ1dHRvbicpLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8vINCe0LHRgNCw0LHQvtGC0YfQuNC60Lgg0L3QsNC20LDRgtC40LlcbiAgICB0aGlzLl9zZXRFdmVudGxpc3RlbmVycygpO1xuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICAvKipcbiAgICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDRgdC70YPRiNCw0YLQtdC70Lgg0YHQvtCx0YvRgtC40Lkg0L3QsCDRjdC70LXQvNC10L3RgtGLINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIF9zZXRFdmVudGxpc3RlbmVycyAoKSB7XG4gICAgLy8g0JvQsNC50Log0LrQsNGA0YLQvtGH0LrQuFxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2xpa2UtYnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMuX2xpa2VDYXJkKGV2ZW50KSk7XG5cbiAgICAvLyDQmtC70LjQuiDQv9C+INC60LDRgNGC0LjQvdC60LVcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWFnZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2xpbmssIHRoaXMuX25hbWUpKTtcblxuICAgIC8vINCa0L3QvtC/0LrQsCDRg9C00LDQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60LgsINC/0YDQuCDQvdCw0LvQuNGH0LjQuFxuICAgIGlmICh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19kZWxldGUtYnV0dG9uJykpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fZGVsZXRlLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5faGFuZGxlRGVsZXRlKCkpO1xuICAgICAgfVxuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRgNCw0LHQsNGC0YvQstCw0LXRgiDQu9Cw0LnQuiDQutCw0YDRgtC+0YfQutC4XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCAtINCh0L7QsdGL0YLQuNC1INC60LvQuNC60LBcbiAgICovXG4gIF9saWtlQ2FyZCAoZXZlbnQpIHtcbiAgICBldmVudC50YXJnZXQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuX2hhbmRsZUxpa2VDYXJkKHRoaXMuX2lkLCB0aGlzLl9pc0xpa2VkKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBldmVudC50YXJnZXQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIH0pXG4gIH1cblxuICAvKipcbiAgICog0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdGCINC90LDQttCw0YLQuNC1INC90LAg0YPQtNCw0LvQtdC90LjQtSDQutCw0YDRgtC+0YfQutC4XG4gICAqL1xuICAgX2hhbmRsZURlbGV0ZSAoKSB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkKHRoaXMuX2lkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQntC/0YDQtdC00LXQu9GP0LXRgiwg0LXRgdGC0Ywg0LvQuCDQu9Cw0LnQuiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3QsCDQutCw0YDRgtC+0YfQutC1XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgX2NoZWNrSXNMaWtlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9saWtlcy5zb21lKHBlcnNvbiA9PiBwZXJzb24uX2lkID09PSB0aGlzLl91c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqINCe0LHRgNCw0LHQsNGC0YvQstCw0LXRgiDQvNCw0YHRgdC40LIg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60Lg6XG4gICAqIC0g0L/RgNC4INC90LDQu9C40YfQuNC4INCw0YDQs9GD0LzQtdC90YLQsCDRgdC+0YXRgNCw0L3Rj9C10YIg0L3QvtCy0YvQtSDQu9Cw0LnQutC4XG4gICAqIC0g0LfQsNC/0LjRgdGL0LLQsNC10YIg0LrQvtC70LjRh9C10YHRgtCy0L4g0LvQsNC50LrQvtCyINCyINGA0LDQt9C80LXRgtC60YNcbiAgICogLSDRgdC+0YXRgNCw0L3Rj9C10YIg0Lgg0L/QvtC60LDQt9GL0LLQsNC10YIg0LIg0YDQsNC30LzQtdGC0LrQtSDRgtC10LrRg9GJ0LXQtSDRgdC+0YHRgtGP0L3QuNC1INC70LDQudC60LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGxpa2VzIC0g0J3QvtCy0YvQtSDQu9Cw0LnQutC4INC60LDRgNGC0L7Rh9C60LggKNC90LXQvtCx0Y/Qt9Cw0YLQtdC70YzQvdGL0Lkg0L/QsNGA0LDQvNC10YLRgClcbiAgICovXG4gIHNldExpa2VzKGxpa2VzKSB7XG4gICAgY29uc3QgbGlrZUNvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1jb3VudCcpO1xuICAgIGNvbnN0IGxpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWJ1dHRvbicpO1xuXG4gICAgaWYgKGxpa2VzKSB7XG4gICAgICB0aGlzLl9saWtlcyA9IGxpa2VzO1xuICAgICAgdGhpcy5faXNMaWtlZCA9IHRoaXMuX2NoZWNrSXNMaWtlZCgpO1xuICAgIH1cblxuICAgIGxpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcblxuICAgIGlmICh0aGlzLl9pc0xpa2VkKSB7XG4gICAgICBsaWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2NhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZScpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDQo9C00LDQu9GP0LXRgiDQutCw0YDRgtC+0YfQutGDINC40Lcg0YDQsNC80LXRgtC60LhcbiAgICovXG4gIGRlbGV0ZSAoKSB7XG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICAvKipcbiAgICog0JrQu9Cw0YHRgSDQvtGC0LLQtdGH0LDQtdGCINC30LAg0L7RgtC60YDRi9GC0LjQtSDQuCDQt9Cw0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsFxuICAgKlxuICAgKiDQn9Cw0YDQsNC80LXRgtGA0Ys6XG4gICAqIHBvcHVwU2VsZWN0b3IgLSDRgdC10LvQtdC60YLQvtGAINC/0L7Qv9Cw0L/QsFxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XG4gIH1cblxuICBvcGVuKCkge1xuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9vcGVuZWQnKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICB9XG5cbiAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xuICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldnQpID0+IHtcbiAgICAgIGlmIChldnQudGFyZ2V0ID09PSBldnQuY3VycmVudFRhcmdldCkgdGhpcy5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fcG9wdXBDbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2FuY2VsLWJ1dHRvbicpO1xuICAgIHRoaXMuX3BvcHVwQ2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcbiAgLyoqXG4gICAqINCa0LvQsNGB0YEg0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINGA0LDQsdC+0YLRgyDRgSDQv9C+0L/QsNC/0L7QvCwg0YHQvtC00LXRgNC20LDRidC40Lwg0YPQstC10LvQuNGH0LXQvdC90L7QtSDQuNC30L7QsdGA0LDQttC10L3QuNC1XG4gICAqXG4gICAqINCf0LDRgNCw0LzQtdGC0YDRizpcbiAgICogcG9wdXBTZWxlY3RvciAtINGB0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDRgSDQv9C+0L/QsNC/0L7QvFxuICAgKi9cbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2ZpZ3VyZUVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlJyk7XG4gICAgdGhpcy5fY2FwdGlvbkVsZW1lbnQgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlLWNhcHRpb24nKTtcbiAgfVxuXG4gIG9wZW4oaW1hZ2VMaW5rLCB0ZXh0KSB7XG4gICAgdGhpcy5fZmlndXJlRWxlbWVudC5zcmMgPSBpbWFnZUxpbms7XG4gICAgdGhpcy5fZmlndXJlRWxlbWVudC5hbHQgPSB0ZXh0O1xuICAgIHRoaXMuX2NhcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICBzdXBlci5vcGVuKCk7XG4gIH1cbn1cbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICAvKipcbiAgICog0JrQu9Cw0YHRgSDQvtGC0LLQtdGH0LDQtdGCINC30LAg0YDQsNCx0L7RgtGDINGBINC/0L7Qv9Cw0L/QvtC8LCDRgdC+0LTQtdGA0LbQsNGJ0LjQvCDRhNC+0YDQvNGDXG4gICAqXG4gICAqINCf0LDRgNCw0LzQtdGC0YDRizpcbiAgICogcG9wdXBTZWxlY3RvciAtINGB0LXQu9C10LrRgtC+0YAg0Y3Qu9C10LzQtdC90YLQsCDRgSDQv9C+0L/QsNC/0L7QvFxuICAgKiBoYW5kbGVTdWJtaXQgLSDQvtCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCkge1xuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XG4gICAgdGhpcy5faW5wdXRWYWx1ZXMgPSB7fTtcbiAgfVxuXG4gIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIHRoaXMuX2lucHV0VmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0VmFsdWVzO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgfSk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm1hdGlvbiBleHRlbmRzIFBvcHVwIHtcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0KSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5faGFuZGxlU3VibWl0ID0gaGFuZGxlU3VibWl0O1xuICAgIHRoaXMuX2J1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fc2F2ZS1idXR0b24nKTtcbiAgfVxuXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbiAgICB0aGlzLl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVTdWJtaXQodGhpcy5fdGFyZ2V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldFRhcmdldCh0YXJnZXQpIHtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEZvcm1WYWxpZGF0b3Ige1xuICAvKipcbiAgICog0JrQu9Cw0YHRgSDQvtGC0LLQtdGH0LDQtdGCINC30LAg0LLQsNC70LjQtNCw0YbQuNGOINGE0L7RgNC80YssINC+0YLQvtCx0YDQsNC20LXQvdC40LUv0YHQutGA0YvRgtC40LUg0L7RiNC40LHQvtC6LCDQvtGC0L7QsdGA0LDQttC10L3QuNC1INC60L3QvtC/0LrQuCDQvtGC0L/RgNCw0LLQutC4XG4gICAqXG4gICAqINCf0LDRgNCw0LzQtdGC0YDRizpcbiAgICogZm9ybUNsYXNzZXMgLSDRgdC10LvQtdC60YLQvtGA0Ysg0Lgg0LrQu9Cw0YHRgdGLINGN0LvQtdC80LXQvdGC0L7QsiDRhNC+0YDQvNGLLCDRhNC+0YDQvNCw0YI6XG4gICAqIHtcbiAgICogICBmb3JtU2VsZWN0b3IsXG4gICAqICAgaW5wdXRTZWxlY3RvcixcbiAgICogICBzdWJtaXRCdXR0b25TZWxlY3RvcixcbiAgICogICBpbmFjdGl2ZUJ1dHRvbkNsYXNzLFxuICAgKiAgIGlucHV0RXJyb3JDbGFzcyxcbiAgICogICBlcnJvckNsYXNzXG4gICAqIH1cbiAgICogZm9ybUVsZW1lbnQgLSDRjdC70LXQvNC10L3RgiDRgSDQstCw0LvQuNC00LjRgNGD0LXQvNC+0Lkg0YTQvtGA0LzQvtC5XG4gICAqL1xuICBjb25zdHJ1Y3RvciAoZm9ybUNsYXNzZXMsIGZvcm1FbGVtZW50KSB7XG4gICAgLy8g0KTQvtGA0LzQsFxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG4gICAgLy8g0KHQtdC70LXQutGC0L7RgNGLINC4INC60LvQsNGB0YHRi1xuICAgIHRoaXMuX2Zvcm1TZWxlY3RvciA9IGZvcm1DbGFzc2VzLmZvcm1TZWxlY3RvcjtcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gZm9ybUNsYXNzZXMuaW5wdXRTZWxlY3RvcjtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGZvcm1DbGFzc2VzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xuICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBmb3JtQ2xhc3Nlcy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGZvcm1DbGFzc2VzLmlucHV0RXJyb3JDbGFzcztcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gZm9ybUNsYXNzZXMuZXJyb3JDbGFzcztcbiAgICAvLyDQrdC70LXQvNC10L3RgtGLINGE0L7RgNC80YtcbiAgICB0aGlzLl9pbnB1dEVsZW1lbnRzID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpKTtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG4gIH1cblxuICBlbmFibGVWYWxpZGF0aW9uICgpIHtcbiAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBfc2V0RXZlbnRMaXN0ZW5lcnMgKCkge1xuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCggaW5wdXRFbGVtZW50ID0+IHtcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5faXNWYWxpZChpbnB1dEVsZW1lbnQpO1xuICAgICAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyDQntC/0YDQtdC00LXQu9GP0LXRgiDQuNGB0YXQvtC00L3QvtC1INC/0L7Qu9C+0LbQtdC90LjQtSDQutC90L7Qv9C60LhcbiAgICB0aGlzLl90b2dnbGVCdXR0b25TdGF0ZSgpO1xuICB9XG5cbiAgX2lzVmFsaWQgKGlucHV0RWxlbWVudCkge1xuICAgIGlmIChpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBfc2hvd0lucHV0RXJyb3IgKGlucHV0RWxlbWVudCwgZXJyb3JNZXNzYWdlKSB7XG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICB9XG5cbiAgX2hpZGVJbnB1dEVycm9yIChpbnB1dEVsZW1lbnQpIHtcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgfVxuXG4gIF90b2dnbGVCdXR0b25TdGF0ZSAoKSB7XG4gICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKSB7XG4gICAgICB0aGlzLmRpc2FibGVCdXR0b25TdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9lbmFibGVCdXR0b25TdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRpc2FibGVCdXR0b25TdGF0ZSAoKSB7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgX2VuYWJsZUJ1dHRvblN0YXRlICgpIHtcbiAgICB0aGlzLl9idXR0b25FbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgdGhpcy5fYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgX2hhc0ludmFsaWRJbnB1dCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lucHV0RWxlbWVudHMuc29tZSggaW5wdXRFbGVtZW50ID0+IGlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCA9PT0gZmFsc2UpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gIC8qKlxuICAgKiDQmtC70LDRgdGBINC+0YLQstC10YfQsNC10YIg0LfQsCDQv9C+0LvRg9GH0LXQvdC40LUg0Lgg0LjQt9C80LXQvdC10L3QuNC1INC40L3RhNC+0YDQvNCw0YbQuNC4INC+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtVxuICAgKlxuICAgKiDQn9Cw0YDQsNC80LXRgtGA0Ys6XG4gICAqIG5hbWVFbGVtZW50IC0g0YLQtdC60YHRgtC+0LLQvtC5INGN0LvQtdC80LXQvdGCINGBINC40LzQtdC90LXQvCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICogam9iRWxlbWVudCAtINGC0LXQutGB0YLQvtCy0L7QuSDRjdC70LXQvNC10L3RgiDRgSDQvtC/0LjRgdCw0L3QuNC10Lwg0LTQtdGP0YLQtdC70YzQvdC+0YHRgtC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiBhdmF0YXJFbGVtZW50IC0g0Y3Qu9C10LzQtdC90YIgaW1nINGBINCw0LLQsNGC0LDRgNC+0Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7bmFtZUVsZW1lbnQsIGpvYkVsZW1lbnQsIGF2YXRhckVsZW1lbnR9KSB7XG4gICAgdGhpcy5fbmFtZUVsZW1lbnQgPSBuYW1lRWxlbWVudDtcbiAgICB0aGlzLl9qb2JFbGVtZW50ID0gam9iRWxlbWVudDtcbiAgICB0aGlzLl9hdmF0YXJFbGVtZW50ID0gYXZhdGFyRWxlbWVudDtcbiAgfVxuXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgam9iOiB0aGlzLl9qb2JcbiAgICB9XG4gIH1cblxuICBmaWxsKHtuYW1lLCBhYm91dCwgYXZhdGFyLCBjb2hvcnQsIF9pZH0pIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICB0aGlzLl9qb2IgPSBhYm91dDtcbiAgICB0aGlzLl9hdmF0YXIgPSBhdmF0YXI7XG4gICAgdGhpcy5fY29ob3J0ID0gY29ob3J0O1xuICAgIHRoaXMuaWQgPSBfaWQ7XG4gIH1cblxuICByZW5kZXJOYW1lKCkge1xuICAgIHRoaXMuX25hbWVFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIHJlbmRlckpvYigpIHtcbiAgICB0aGlzLl9qb2JFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fam9iO1xuICB9XG5cbiAgcmVuZGVyQXZhdGFyKCkge1xuICAgIHRoaXMuX2F2YXRhckVsZW1lbnQuc3JjID0gdGhpcy5fYXZhdGFyO1xuICB9XG59XG4iLCIvKipcbiAqINCY0LzQv9C+0YDRgiDQtNCw0L3QvdGL0YUg0LjQtyDQtNGA0YPQs9C40YUg0LzQvtC00YPQu9C10LlcbiAqL1xuaW1wb3J0IHtcbiAgY2FyZHNTZWxlY3RvcixcbiAgY2FyZFRlbXBsYXRlU2VsZWN0b3IsXG4gIGZvcm1TZWxlY3RvcixcbiAgaW5wdXRTZWxlY3RvcixcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3IsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3MsXG4gIGlucHV0RXJyb3JDbGFzcyxcbiAgZXJyb3JDbGFzcyxcbiAgcHJvZmlsZU5hbWUsXG4gIHByb2ZpbGVKb2IsXG4gIHByb2ZpbGVBdmF0YXIsXG4gIHByb2ZpbGVFZGl0QnV0dG9uLFxuICBwcm9maWxlTmFtZUlucHV0LFxuICBwcm9maWxlSm9iSW5wdXQsXG4gIHByb2ZpbGVFZGl0UG9wdXBTZWxlY3RvcixcbiAgYXZhdGFyQ2hhbmdlQnV0dG9uLFxuICBhdmF0YXJDaGFuZ2VQb3B1cFNlbGVjdG9yLFxuICBuZXdDYXJkQnV0dG9uLFxuICBuZXdDYXJkRm9ybSxcbiAgbmV3Q2FyZFBvcHVwU2VsZWN0b3IsXG4gIGltYWdlUG9wdXBTZWxlY3RvcixcbiAgY29uZmlybWF0aW9uUG9wdXBTZWxlY3RvcixcbiAgYXBpQ29uZmlnXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xuaW1wb3J0IENhcmQgZnJvbSAnLi4vY29tcG9uZW50cy9DYXJkLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgUG9wdXBXaXRoQ29uZmlybWF0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybWF0aW9uLmpzJztcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gJy4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyc7XG5pbXBvcnQgVXNlckluZm8gZnJvbSAnLi4vY29tcG9uZW50cy9Vc2VySW5mby5qcyc7XG5pbXBvcnQgQXBpIGZyb20gJy4uL2NvbXBvbmVudHMvQXBpLmpzJztcbmltcG9ydCAnLi9pbmRleC5jc3MnOyAvLyDQuNC80L/QvtGA0YIgY3NzLdGB0YLQuNC70LXQuSDQtNC70Y8g0YHQsdC+0YDQutC4INCyIFdlYnBhY2tcblxuLy8g0KTRg9C90LrRhtC40LhcbmNvbnN0IGZvcm1WYWxpZGF0b3JzID0ge307XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRm9ybXMgKGZvcm1DbGFzc2VzKSB7XG4gIGNvbnN0IGZvcm1FbGVtZW50cyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChmb3JtQ2xhc3Nlcy5mb3JtU2VsZWN0b3IpKTtcbiAgZm9ybUVsZW1lbnRzLmZvckVhY2goZm9ybUVsZW1lbnQgPT4ge1xuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybVZhbGlkYXRvcihmb3JtQ2xhc3NlcywgZm9ybUVsZW1lbnQpO1xuICAgIGZvcm1WYWxpZGF0b3JzW2Zvcm1FbGVtZW50LmdldEF0dHJpYnV0ZSgnbmFtZScpXSA9IGZvcm07XG4gICAgZm9ybS5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIH0pO1xufVxuXG5jb25zdCBjYXJkcyA9IHt9O1xuXG5mdW5jdGlvbiByZW5kZXJDYXJkKGRhdGEpIHtcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKGRhdGEsIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZURlbGV0ZUNhcmQsIGhhbmRsZUxpa2VDYXJkLCB1c2VySW5mby5pZCk7XG4gIGNhcmRzW2RhdGEuX2lkXSA9IGNhcmQ7XG4gIHJldHVybiBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2soaW1hZ2VMaW5rLCB0ZXh0KSB7XG4gIGltYWdlUG9wdXAub3BlbihpbWFnZUxpbmssIHRleHQpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEZWxldGVDYXJkKGNhcmRJZCkge1xuICBwb3B1cFdpdGhDb25maXJtYXRpb24uc2V0VGFyZ2V0KGNhcmRJZCk7XG4gIHBvcHVwV2l0aENvbmZpcm1hdGlvbi5vcGVuKCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUxpa2VDYXJkKGNhcmRJZCwgaXNMaWtlZCkge1xuICByZXR1cm4gYXBpLnRvZ2dsZUxpa2UoY2FyZElkLCBpc0xpa2VkKVxuICAgIC50aGVuKGxpa2VzID0+IHtcbiAgICAgIGNhcmRzW2NhcmRJZF0uc2V0TGlrZXMobGlrZXMpO1xuICAgIH0pO1xufVxuXG5cbi8vINCY0L3QuNGG0LjQsNC70LjQt9Cw0YbQuNGPINC60LvQsNGB0YHQvtCyXG5jb25zdCBhcGkgPSBuZXcgQXBpKGFwaUNvbmZpZyk7XG5cbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcbiAgbmFtZUVsZW1lbnQ6IHByb2ZpbGVOYW1lLFxuICBqb2JFbGVtZW50OiBwcm9maWxlSm9iLFxuICBhdmF0YXJFbGVtZW50OiBwcm9maWxlQXZhdGFyXG59KTtcblxuYXBpLmdldFVzZXJJbmZvKClcbiAgLnRoZW4ocmVzID0+IHtcbiAgICB1c2VySW5mby5maWxsKHJlcyk7XG4gICAgdXNlckluZm8ucmVuZGVyTmFtZSgpO1xuICAgIHVzZXJJbmZvLnJlbmRlckpvYigpO1xuICAgIHVzZXJJbmZvLnJlbmRlckF2YXRhcigpO1xuICB9KTtcblxuXG5jb25zdCBjYXJkc1NlY3Rpb24gPSBuZXcgU2VjdGlvbih7XG4gIGl0ZW1zOiBbXSxcbiAgcmVuZGVyZXI6IHJlbmRlckNhcmRcbn0sIGNhcmRzU2VsZWN0b3IpO1xuXG5hcGkuZ2V0SW5pdGlhbENhcmRzKClcbiAgLnRoZW4ocmVzID0+IHtcbiAgICByZXMuZm9yRWFjaChkYXRhID0+IHtcbiAgICAgIGNvbnN0IGNhcmQgPSByZW5kZXJDYXJkKGRhdGEpO1xuICAgICAgY2FyZHNTZWN0aW9uLmFkZEl0ZW0oY2FyZCk7XG4gICAgfSk7XG59KTtcblxuXG5jb25zdCBwcm9maWxlRWRpdFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0ocHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yLCBkYXRhID0+IHtcbiAgYXBpLnNldFVzZXJJbmZvKGRhdGEpXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIHVzZXJJbmZvLmZpbGwocmVzKTtcbiAgICAgIHVzZXJJbmZvLnJlbmRlck5hbWUoKTtcbiAgICAgIHVzZXJJbmZvLnJlbmRlckpvYigpO1xuICAgICAgcHJvZmlsZUVkaXRQb3B1cC5jbG9zZSgpO1xuICAgIH0pO1xufSk7XG5cbmNvbnN0IGF2YXRhckNoYW5nZVBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oYXZhdGFyQ2hhbmdlUG9wdXBTZWxlY3RvciwgZGF0YSA9PiB7XG4gIGFwaS5jaGFuZ2VBdmF0YXIoZGF0YS5saW5rKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHVzZXJJbmZvLmZpbGwocmVzKTtcbiAgICAgIHVzZXJJbmZvLnJlbmRlckF2YXRhcigpO1xuICAgICAgYXZhdGFyQ2hhbmdlUG9wdXAuY2xvc2UoKTtcbiAgICB9KTtcbn0pO1xuXG5hdmF0YXJDaGFuZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBuZXdDYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShuZXdDYXJkUG9wdXBTZWxlY3RvciwgZGF0YSA9PiB7XG4gIGFwaS5hZGROZXdDYXJkKGRhdGEpXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGNhcmRzU2VjdGlvbi5hZGRJdGVtKHJlbmRlckNhcmQocmVzKSwgdHJ1ZSk7XG4gICAgICBuZXdDYXJkUG9wdXAuY2xvc2UoKTtcbiAgICAgIGZvcm1WYWxpZGF0b3JzW25ld0NhcmRGb3JtLmdldEF0dHJpYnV0ZSgnbmFtZScpXS5kaXNhYmxlQnV0dG9uU3RhdGUoKTtcbiAgICB9KTtcbn0pO1xuXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKGltYWdlUG9wdXBTZWxlY3Rvcik7XG5cbmNvbnN0IHBvcHVwV2l0aENvbmZpcm1hdGlvbiA9IG5ldyBQb3B1cFdpdGhDb25maXJtYXRpb24oY29uZmlybWF0aW9uUG9wdXBTZWxlY3RvciwgKGNhcmRJZCkgPT4ge1xuICBhcGkuZGVsZXRlQ2FyZChjYXJkSWQpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY2FyZHNbY2FyZElkXS5kZWxldGUoKTtcbiAgICAgIHBvcHVwV2l0aENvbmZpcm1hdGlvbi5jbG9zZSgpO1xuICAgIH0pXG59KTtcblxucG9wdXBXaXRoQ29uZmlybWF0aW9uLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cblxuXG5cbi8vINCj0YHRgtCw0L3QvtCy0LrQsCDRgdC70YPRiNCw0YLQtdC70LXQuSDRgdC+0LHRi9GC0LjQuVxucHJvZmlsZUVkaXRQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5wcm9maWxlRWRpdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgKHtcbiAgICBuYW1lOiBwcm9maWxlTmFtZUlucHV0LnZhbHVlLFxuICAgIGpvYjogcHJvZmlsZUpvYklucHV0LnZhbHVlXG4gIH0gPSB1c2VySW5mby5nZXRVc2VySW5mbygpKTtcbiAgcHJvZmlsZU5hbWVJbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnKSk7XG4gIHByb2ZpbGVKb2JJbnB1dC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnKSk7XG4gIHByb2ZpbGVFZGl0UG9wdXAub3BlbigpO1xufSk7XG5cbmF2YXRhckNoYW5nZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgYXZhdGFyQ2hhbmdlUG9wdXAub3BlbigpO1xufSlcblxubmV3Q2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cbm5ld0NhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gIG5ld0NhcmRQb3B1cC5vcGVuKCk7XG59KTtcblxuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG4vLyDQktGL0LfQvtCyINGE0YPQvdC60YbQuNC5INC4INC80LXRgtC+0LTQvtCyINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGB0YLRgNCw0L3QuNGG0YtcbnZhbGlkYXRlRm9ybXMoe1xuICBmb3JtU2VsZWN0b3IsXG4gIGlucHV0U2VsZWN0b3IsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yLFxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzLFxuICBpbnB1dEVycm9yQ2xhc3MsXG4gIGVycm9yQ2xhc3Ncbn0pO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBpIHtcbiAgLyoqXG4gICAqINCe0YLQstC10YfQsNC10YIg0LfQsCDQvtGB0YPRidC10YHRgtCy0LvQtdC90LjQtSDQuCDQvtCx0YDQsNCx0L7RgtC60YMg0YHQtdGC0LXQstGL0YUg0LfQsNC/0YDQvtGB0L7QsiDQuiDRgdC10YDQstC10YDRg1xuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0g0JrQvtC90YTQuNCzINC30LDQv9GA0L7RgdC+0LIg0Log0YHQtdGA0LLQtdGA0YM6XG4gICAqIC0gYmFzZVVybCAtINCR0LDQt9C+0LLQsNGPINGH0LDRgdGC0YwgdXJsLdCw0LTRgNC10YHQsCDRgdC10YDQstC10YDQsFxuICAgKiAtIGhlYWRlcnMgLSDQl9Cw0LPQvtC70L7QstC60Lgg0LfQsNC/0YDQvtGB0LAsINCx0YPQtNGD0YIg0L/QtdGA0LXQtNCw0LLQsNGC0YzRgdGPINC/0YDQuCDQutCw0LbQtNC+0Lwg0L7QsdGA0LDRidC10L3QuNC4XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7YmFzZVVybCwgaGVhZGVyc30pIHtcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LDQtdGCINC00LDQvdC90YvQtSDRgtC10LrRg9GJ0LXQs9C+INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0YrQtdC60YIg0YLQtdC60YPRidC10LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIGdldFVzZXJJbmZvKCkge1xuICAgIGNvbnN0IHVybCA9ICB0aGlzLl9iYXNlVXJsICsgYC91c2Vycy9tZWA7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZ2V0IHVzZXIgaW5mbyBmcm9tIHRoZSBzZXJ2ZXJgKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQo9GB0YLQsNC90LDQstC70LjQstCw0LXRgiDQvdC+0LLRi9C1INC40LzRjyDQuCDQv9GA0L7RhNC10YHRgdC40Y4g0YLQtdC60YPRidC10LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICogQHBhcmFtIHtvYmplY3R9INCe0LHRitC10LrRgiDRgSDQvtCx0L3QvtCy0LvRj9C10LzRi9C80Lgg0L/QsNGA0LDQvNC10YLRgNCw0LzQuDpcbiAgICogLSBuYW1lIC0g0LjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgKiAtIGpvYiAtINC/0YDQvtGE0LXRgdGB0LjRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvtGC0LLQtdGC0L7QvCDRgdC10YDQstC10YDQsDog0L7QsdC90L7QstC70LXQvdC90YvQuSDQvtCx0YrQtdC60YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqL1xuICBzZXRVc2VySW5mbyh7bmFtZSwgam9ifSkge1xuICAgIGNvbnN0IHVybCA9ICB0aGlzLl9iYXNlVXJsICsgYC91c2Vycy9tZWA7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBuYW1lLFxuICAgICAgICBhYm91dDogam9iXG4gICAgICB9KVxuICAgIH0pXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGlmIChyZXMub2spIHJldHVybiByZXMuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBzZW5kIHVzZXIgaW5mbyB0byB0aGUgc2VydmVyYCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4gIH1cblxuICAvKipcbiAgICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0L3QvtCy0YvQuSDQsNCy0LDRgtCw0YAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0g0KHRgdGL0LvQutCwINC90LAg0LrQsNGA0YLQuNC90LrRg1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0L3QvtCy0LvQtdC90L3Ri9C5INC+0LHRitC10LrRgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICovXG4gIGNoYW5nZUF2YXRhcihsaW5rKSB7XG4gICAgY29uc3QgdXJsID0gIHRoaXMuX2Jhc2VVcmwgKyBgL3VzZXJzL21lL2F2YXRhcmA7XG5cbiAgICByZXR1cm4gZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBhdmF0YXI6IGxpbmtcbiAgICAgIH0pXG4gICAgfSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgaWYgKHJlcy5vaykgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHNlbmQgYXZhdGFyIHRvIHRoZSBzZXJ2ZXJgKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C+0LvRg9GH0LDQtdGCINC40YHRhdC+0LTQvdGL0LUg0LrQsNGA0YLQvtGH0LrQuCDQtNC70Y8g0L7RgtGA0LjRgdC+0LLQutC4XG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSDQn9GA0L7QvNC40YEg0YEg0L7RgtCy0LXRgtC+0Lwg0YHQtdGA0LLQtdGA0LA6INC80LDRgdGB0LjQsiDQutCw0YDRgtC+0YfQtdC6XG4gICAqL1xuICBnZXRJbml0aWFsQ2FyZHMoKSB7XG4gICAgY29uc3QgdXJsID0gIHRoaXMuX2Jhc2VVcmwgKyBgL2NhcmRzYDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGlmIChyZXMub2spIHJldHVybiByZXMuanNvbigpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBnZXQgaW5pdGlhbCBjYXJkcyBmcm9tIHRoZSBzZXJ2ZXJgKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQlNC+0LHQsNCy0LvRj9C10YIg0L3QvtCy0YPRjiDQutCw0YDRgtC+0YfQutGDXG4gICAqIEBwYXJhbSB7b2JqZWN0fSDQn9Cw0YDQsNC80LXRgtGA0Ysg0LTQvtCx0LDQstC70Y/QtdC80L7QuSDQutCw0YDRgtC+0YfQutC4OlxuICAgKiAtIG5hbWUgLSDQvtGC0L7QsdGA0LDQttCw0LXQvNC+0LUg0LjQvNGPXG4gICAqIC0gbGluayAtINGB0YHRi9C70LrQsCDQvdCwINC00L7QsdCw0LLQu9GP0LXQvNGD0Y4g0LrQsNGA0YLQuNC90LrRg1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwOiDQvtCx0YrQtdC60YIg0YHQvtC30LTQsNC90L3QvtC5INC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIGFkZE5ld0NhcmQoe25hbWUsIGxpbmt9KSB7XG4gICAgY29uc3QgdXJsID0gIHRoaXMuX2Jhc2VVcmwgKyBgL2NhcmRzYDtcblxuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbGlua1xuICAgICAgfSlcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3Qgc2VuZCBuZXcgY2FyZCB0byB0aGUgc2VydmVyYCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyKSk7XG4gIH1cblxuICAvKipcbiAgICog0KPQtNCw0LvRj9C10YIg0LrQsNGA0YLQvtGH0LrRgyDRgSDRgdC10YDQstC10YDQsFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FyZElkIC0gSUQg0LrQsNGA0YLQvtGH0LrQuFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0g0J/RgNC+0LzQuNGBINGBINC+0YLQstC10YLQvtC8INGB0LXRgNCy0LXRgNCwXG4gICAqL1xuICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgIGNvbnN0IHVybCA9ICB0aGlzLl9iYXNlVXJsICsgYC9jYXJkcy8ke2NhcmRJZH1gO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGRlbGV0ZSBjYXJkIGZyb20gdGhlIHNlcnZlcmApO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuICB9XG5cbiAgLyoqXG4gICAqINCh0YLQsNCy0LjRgiDQu9Cw0LnQuiDQvdCwINC60LDRgNGC0L7Rh9C60YNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvNCw0YHRgdC40LLQvtC8INC90L7QstGL0YUg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIF9zZXRMaWtlKGNhcmRJZCkge1xuICAgIGNvbnN0IHVybCA9ICB0aGlzLl9iYXNlVXJsICsgYC9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3Qgc2VuZCBsaWtlIHRvIHRoZSBzZXJ2ZXJgKTtcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICByZXR1cm4gcmVzLmxpa2VzO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmVycm9yKGVycikpO1xuICB9XG5cbiAgLyoqXG4gICAqINCj0LTQsNC70Y/QtdGCINC70LDQudC6INGBINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvNCw0YHRgdC40LLQvtC8INC90L7QstGL0YUg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIF9kZWxldGVMaWtlKGNhcmRJZCkge1xuICAgIGNvbnN0IHVybCA9ICB0aGlzLl9iYXNlVXJsICsgYC9jYXJkcy8ke2NhcmRJZH0vbGlrZXNgO1xuXG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnNcbiAgICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZGVsZXRlIGxpa2UgZnJvbSB0aGUgc2VydmVyYCk7XG4gICAgfSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgcmV0dXJuIHJlcy5saWtlcztcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDQn9C10YDQtdC60LvRjtGH0LDQtdGCINC70LDQudC6INC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNhcmRJZCAtIElEINC60LDRgNGC0L7Rh9C60LhcbiAgICogQHBhcmFtIHtib29sZWFufSBpc0xpa2VkIC0g0KLQtdC60YPRidC40Lkg0YHRgtCw0YLRg9GBINC70LDQudC60LBcbiAgICogQHJldHVybnMge1Byb21pc2V9INCf0YDQvtC80LjRgSDRgSDQvNCw0YHRgdC40LLQvtC8INC90L7QstGL0YUg0LvQsNC50LrQvtCyINC60LDRgNGC0L7Rh9C60LhcbiAgICovXG4gIHRvZ2dsZUxpa2UoY2FyZElkLCBpc0xpa2VkKSB7XG4gICAgaWYgKGlzTGlrZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWxldGVMaWtlKGNhcmRJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRMaWtlKGNhcmRJZCk7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiZm9ybVNlbGVjdG9yIiwicHJvZmlsZU5hbWUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwcm9maWxlSm9iIiwicHJvZmlsZUF2YXRhciIsInByb2ZpbGVFZGl0QnV0dG9uIiwicHJvZmlsZUVkaXRQb3B1cFNlbGVjdG9yIiwicHJvZmlsZUVkaXRQb3B1cEVsZW1lbnQiLCJwcm9maWxlTmFtZUlucHV0IiwicHJvZmlsZUpvYklucHV0IiwiYXZhdGFyQ2hhbmdlQnV0dG9uIiwibmV3Q2FyZEJ1dHRvbiIsIm5ld0NhcmRQb3B1cFNlbGVjdG9yIiwibmV3Q2FyZEZvcm0iLCJhcGlDb25maWciLCJiYXNlVXJsIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJTZWN0aW9uIiwiY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtcyIsInJlbmRlcmVyIiwidGhpcyIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJmb3JFYWNoIiwiaXRlbSIsImVsZW1lbnQiLCJhZGRJdGVtIiwiaXNJbnZlcnNlZCIsInByZXBlbmQiLCJhcHBlbmQiLCJDYXJkIiwidGVtcGxhdGVTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNhcmQiLCJoYW5kbGVMaWtlQ2FyZCIsInVzZXJJZCIsIm5hbWUiLCJsaW5rIiwibGlrZXMiLCJvd25lciIsImNyZWF0ZWRBdCIsIl9pZCIsIl9uYW1lIiwiX2xpbmsiLCJfbGlrZXMiLCJfb3duZXIiLCJfY3JlYXRlZEF0IiwiX3VzZXJJZCIsIl9pc0xpa2VkIiwiX2NoZWNrSXNMaWtlZCIsIl90ZW1wbGF0ZVNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsIl9oYW5kbGVEZWxldGVDYXJkIiwiX2hhbmRsZUxpa2VDYXJkIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiaW1hZ2UiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsInNldExpa2VzIiwicmVtb3ZlIiwiX3NldEV2ZW50bGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiX2xpa2VDYXJkIiwiX2hhbmRsZURlbGV0ZSIsInRhcmdldCIsImRpc2FibGVkIiwidGhlbiIsInNvbWUiLCJwZXJzb24iLCJsaWtlQ291bnQiLCJsaWtlQnV0dG9uIiwibGVuZ3RoIiwiY2xhc3NMaXN0IiwiYWRkIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUVzY0Nsb3NlIiwiYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJjbG9zZSIsImN1cnJlbnRUYXJnZXQiLCJfcG9wdXBDbG9zZUJ1dHRvbiIsIlBvcHVwV2l0aEltYWdlIiwiX2ZpZ3VyZUVsZW1lbnQiLCJfY2FwdGlvbkVsZW1lbnQiLCJpbWFnZUxpbmsiLCJ0ZXh0IiwiUG9wdXBXaXRoRm9ybSIsImhhbmRsZVN1Ym1pdCIsIl9oYW5kbGVTdWJtaXQiLCJfZm9ybSIsIl9pbnB1dFZhbHVlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsIlBvcHVwV2l0aENvbmZpcm1hdGlvbiIsIl9idXR0b24iLCJfdGFyZ2V0IiwiRm9ybVZhbGlkYXRvciIsImZvcm1DbGFzc2VzIiwiZm9ybUVsZW1lbnQiLCJfZm9ybUVsZW1lbnQiLCJfZm9ybVNlbGVjdG9yIiwiX2lucHV0U2VsZWN0b3IiLCJpbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJfaW5hY3RpdmVCdXR0b25DbGFzcyIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiX2lucHV0RWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJfYnV0dG9uRWxlbWVudCIsIl9zZXRFdmVudExpc3RlbmVycyIsImlucHV0RWxlbWVudCIsIl9pc1ZhbGlkIiwiX3RvZ2dsZUJ1dHRvblN0YXRlIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJfaGFzSW52YWxpZElucHV0IiwiZGlzYWJsZUJ1dHRvblN0YXRlIiwiX2VuYWJsZUJ1dHRvblN0YXRlIiwiVXNlckluZm8iLCJuYW1lRWxlbWVudCIsImpvYkVsZW1lbnQiLCJhdmF0YXJFbGVtZW50IiwiX25hbWVFbGVtZW50IiwiX2pvYkVsZW1lbnQiLCJfYXZhdGFyRWxlbWVudCIsImpvYiIsIl9qb2IiLCJhYm91dCIsImF2YXRhciIsImNvaG9ydCIsIl9hdmF0YXIiLCJfY29ob3J0IiwiZm9ybVZhbGlkYXRvcnMiLCJjYXJkcyIsInJlbmRlckNhcmQiLCJkYXRhIiwiY2FyZCIsInVzZXJJbmZvIiwiZ2VuZXJhdGVDYXJkIiwiaW1hZ2VQb3B1cCIsIm9wZW4iLCJjYXJkSWQiLCJwb3B1cFdpdGhDb25maXJtYXRpb24iLCJzZXRUYXJnZXQiLCJpc0xpa2VkIiwiYXBpIiwidG9nZ2xlTGlrZSIsIkFwaSIsIl9iYXNlVXJsIiwiX2hlYWRlcnMiLCJ1cmwiLCJmZXRjaCIsIm1ldGhvZCIsInJlcyIsIm9rIiwianNvbiIsIkVycm9yIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIlByb21pc2UiLCJyZXNvbHZlIiwiX2RlbGV0ZUxpa2UiLCJfc2V0TGlrZSIsImdldFVzZXJJbmZvIiwiZmlsbCIsInJlbmRlck5hbWUiLCJyZW5kZXJKb2IiLCJyZW5kZXJBdmF0YXIiLCJjYXJkc1NlY3Rpb24iLCJnZXRJbml0aWFsQ2FyZHMiLCJwcm9maWxlRWRpdFBvcHVwIiwic2V0VXNlckluZm8iLCJhdmF0YXJDaGFuZ2VQb3B1cCIsImNoYW5nZUF2YXRhciIsInNldEV2ZW50TGlzdGVuZXJzIiwibmV3Q2FyZFBvcHVwIiwiYWRkTmV3Q2FyZCIsImdldEF0dHJpYnV0ZSIsImRlbGV0ZUNhcmQiLCJkZWxldGUiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJmb3JtIiwiZW5hYmxlVmFsaWRhdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=