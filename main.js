(()=>{"use strict";var e=".popup__form",t={formSelector:e,inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},n={name:document.querySelector(".profile__name"),job:document.querySelector(".profile__job"),avatar:document.querySelector(".profile__avatar-image")},r=document.querySelector(".profile__button_type_edit"),o=".popup_type_edit-profile",i=document.querySelector(o),a=i.querySelector(".popup__input_type_name"),u=i.querySelector(".popup__input_type_job"),c=document.querySelector(".profile__avatar-button"),s=document.querySelector(".profile__button_type_add"),l=".popup_type_add-card",f=document.querySelector(l).querySelector(e),p={baseUrl:"https://mesto.nomoreparties.co/v1/".concat("cohort-41"),headers:{authorization:"b5024e97-68ca-4480-bf36-543078de24a2","Content-Type":"application/json"}};function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){var n=e._renderer(t);e.addItem(n)}))}},{key:"addItem",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t?this._container.prepend(e):this._container.append(e)}}],n&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t,n,r,o,i,a){var u=t.name,c=t.link,s=t.likes,l=t.owner,f=t.createdAt,p=t._id;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=u,this._link=c,this._likes=s,this._owner=l,this._createdAt=f,this._id=p,this._userId=a,this._isLiked=this._checkIsLiked(),this._templateSelector=n,this._handleCardClick=r,this._handleDeleteCard=o,this._handleLikeCard=i}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){this._element=this._getTemplate();var e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=this._name,this._element.querySelector(".card__title").textContent=this._name,this.setLikes(),this._owner._id!==this._userId&&this._element.querySelector(".card__delete-button").remove(),this._setEventlisteners(),this._element}},{key:"_setEventlisteners",value:function(){var e=this;this._element.querySelector(".card__like-button").addEventListener("click",(function(t){return e._likeCard(t)})),this._element.querySelector(".card__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)})),this._element.querySelector(".card__delete-button")&&this._element.querySelector(".card__delete-button").addEventListener("click",(function(){return e._handleDelete()}))}},{key:"_likeCard",value:function(e){e.target.disabled=!0,this._handleLikeCard(this._id,this._isLiked).then((function(){e.target.disabled=!1}))}},{key:"_handleDelete",value:function(){this._handleDeleteCard(this._id)}},{key:"_checkIsLiked",value:function(){var e=this;return this._likes.some((function(t){return t._id===e._userId}))}},{key:"setLikes",value:function(e){var t=this._element.querySelector(".card__like-count"),n=this._element.querySelector(".card__like-button");e&&(this._likes=e,this._isLiked=this._checkIsLiked()),t.textContent=this._likes.length,this._isLiked?n.classList.add("card__like-button_active"):n.classList.remove("card__like-button_active")}},{key:"delete",value:function(){this._element.remove(),this._element=null}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var b=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){t.target===t.currentTarget&&e.close()})),this._popupCloseButton=this._popup.querySelector(".popup__cancel-button"),this._popupCloseButton.addEventListener("click",(function(){e.close()}))}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(){return E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=w(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},E.apply(this,arguments)}function w(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function g(e,t){return g=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},g(e,t)}function S(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return S(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._figureElement=t._popup.querySelector(".popup__image"),t._captionElement=t._popup.querySelector(".popup__image-caption"),t}return t=a,(n=[{key:"open",value:function(e,t){this._figureElement.src=e,this._figureElement.alt=t,this._captionElement.textContent=t,E(j(a.prototype),"open",this).call(this)}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(b);function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function P(){return P="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=q(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},P.apply(this,arguments)}function q(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}function I(e,t){return I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},I(e,t)}function T(e,t){if(t&&("object"===O(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function R(e){return R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},R(e)}var B=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleSubmit=t,n._form=n._popup.querySelector(".popup__form"),n._inputValues={},n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._form.querySelectorAll(".popup__input").forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;P(R(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submit()}))}},{key:"_submit",value:function(){var e=this._form.querySelector(".popup__save-button"),t=e.textContent;e.disabled=!0,e.textContent="Сохранение...",this._handleSubmit(this._getInputValues()).then((function(){e.textContent=t,e.disabled=!1}))}},{key:"close",value:function(){P(R(a.prototype),"close",this).call(this),this._form.reset()}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(b);function U(e){return U="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},U(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(){return A="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=D(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},A.apply(this,arguments)}function D(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=J(e)););return e}function N(e,t){return N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},N(e,t)}function V(e,t){if(t&&("object"===U(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function J(e){return J=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},J(e)}var G=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&N(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=J(r);if(o){var n=J(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return V(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,e))._handleSubmit=t,n._button=n._popup.querySelector(".popup__save-button"),n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;A(J(a.prototype),"setEventListeners",this).call(this),this._button.addEventListener("click",(function(){e._handleSubmit(e._target)}))}},{key:"setTarget",value:function(e){this._target=e}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(b);function H(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var z=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputElements=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var t,n;return t=e,(n=[{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"_setEventListeners",value:function(){var e=this;this._inputElements.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e._toggleButtonState()}))})),this._toggleButtonState()}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this.disableButtonState():this._enableButtonState()}},{key:"disableButtonState",value:function(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}},{key:"_enableButtonState",value:function(){this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1}},{key:"_hasInvalidInput",value:function(){return this._inputElements.some((function(e){return!1===e.validity.valid}))}}])&&H(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function M(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var F=function(){function e(t){var n=t.nameElement,r=t.jobElement,o=t.avatarElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._nameElement=n,this._jobElement=r,this._avatarElement=o}var t,n;return t=e,(n=[{key:"fill",value:function(e){var t=e.name,n=e.about,r=e.avatar,o=e.cohort,i=e._id;this._name=t,this._job=n,this._avatar=r,this._cohort=o,this.id=i}},{key:"getUserInfo",value:function(){return{name:this._name,job:this._job}}},{key:"renderName",value:function(){this._nameElement.textContent=this._name}},{key:"renderJob",value:function(){this._jobElement.textContent=this._job}},{key:"renderAvatar",value:function(){this._avatarElement.src=this._avatar}}])&&M(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Q={},W={};function X(e){var t=new y(e,"#card",Y,Z,$,te.id);return W[e._id]=t,t.generateCard()}function Y(e,t){ae.open(e,t)}function Z(e){ue.setTarget(e),ue.open()}function $(e,t){return ee.toggleLike(e,t).then((function(t){W[e].setLikes(t)}))}var ee=new(function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){var e=this._baseUrl+"/users/me";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get user info from the server")})).catch((function(e){return console.error(e)}))}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job,r=this._baseUrl+"/users/me";return fetch(r,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send user info to the server")})).catch((function(e){return console.error(e)}))}},{key:"changeAvatar",value:function(e){var t=this._baseUrl+"/users/me/avatar";return fetch(t,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send avatar to the server")})).catch((function(e){return console.error(e)}))}},{key:"getInitialCards",value:function(){var e=this._baseUrl+"/cards";return fetch(e,{method:"GET",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't get initial cards from the server")})).catch((function(e){return console.error(e)}))}},{key:"addNewCard",value:function(e){var t=e.name,n=e.link,r=this._baseUrl+"/cards";return fetch(r,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send new card to the server")})).catch((function(e){return console.error(e)}))}},{key:"deleteCard",value:function(e){var t=this._baseUrl+"/cards/".concat(e);return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return Promise.resolve();throw new Error("Can't delete card from the server")})).catch((function(e){return console.error(e)}))}},{key:"_setLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"PUT",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't send like to the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"_deleteLike",value:function(e){var t=this._baseUrl+"/cards/".concat(e,"/likes");return fetch(t,{method:"DELETE",headers:this._headers}).then((function(e){if(e.ok)return e.json();throw new Error("Can't delete like from the server")})).then((function(e){return e.likes})).catch((function(e){return console.error(e)}))}},{key:"toggleLike",value:function(e,t){return t?this._deleteLike(e):this._setLike(e)}}])&&K(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}())(p),te=new F({nameElement:n.name,jobElement:n.job,avatarElement:n.avatar}),ne=new d({items:[],renderer:X},".cards"),re=new B(o,(function(e){return ee.setUserInfo(e).then((function(e){te.fill(e),te.renderName(),te.renderJob(),re.close()}))})),oe=new B(".popup_type_change-avatar",(function(e){return ee.changeAvatar(e.link).then((function(e){te.fill(e),te.renderAvatar(),oe.close()}))})),ie=new B(l,(function(e){return ee.addNewCard(e).then((function(e){ne.addItem(X(e),!0),ie.close(),Q[f.getAttribute("name")].disableButtonState()}))})),ae=new C(".popup_type_image"),ue=new G(".popup_type_confirm",(function(e){ee.deleteCard(e).then((function(){W[e].delete(),ue.close()}))}));ee.getUserInfo().then((function(e){te.fill(e),te.renderName(),te.renderJob(),te.renderAvatar()})).then((function(){return ee.getInitialCards()})).then((function(e){e.forEach((function(e){var t=X(e);ne.addItem(t)}))})),re.setEventListeners(),r.addEventListener("click",(function(){var e=te.getUserInfo();a.value=e.name,u.value=e.job,a.dispatchEvent(new Event("input")),u.dispatchEvent(new Event("input")),re.open()})),oe.setEventListeners(),c.addEventListener("click",(function(){oe.open()})),ie.setEventListeners(),s.addEventListener("click",(function(){ie.open()})),ue.setEventListeners(),ae.setEventListeners(),function(e){Array.from(document.querySelectorAll(e.formSelector)).forEach((function(t){var n=new z(e,t);Q[t.getAttribute("name")]=n,n.enableValidation()}))}(t)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,